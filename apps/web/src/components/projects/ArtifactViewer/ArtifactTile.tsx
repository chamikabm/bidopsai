'use client';

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';
import { FileText, FileSpreadsheet, FileQuestion, Presentation, Eye, Clock } from 'lucide-react';
import type { ArtifactType, ArtifactCategory } from '@/types/artifact.types';
import { formatDate } from '@/utils/date';

interface ArtifactTileProps {
  name: string;
  type: ArtifactType;
  category: ArtifactCategory;
  status: string;
  createdAt: string;
  createdBy: string;
  tags?: string[];
  onClick: () => void;
  className?: string;
}

/**
 * ArtifactTile Component
 * 
 * Displays a clickable tile/card for an artifact generated by agents.
 * Shows artifact metadata including type, category, status, and tags.
 * When clicked, opens the artifact in the appropriate editor modal.
 */
export function ArtifactTile({
  name,
  type,
  category,
  status,
  createdAt,
  createdBy,
  tags = [],
  onClick,
  className,
}: ArtifactTileProps) {
  // Get icon based on artifact type
  const getArtifactIcon = () => {
    const iconClass = 'h-6 w-6';
    
    switch (type) {
      case 'WORDDOC':
      case 'PDF':
        return <FileText className={iconClass} />;
      case 'EXCEL':
        return <FileSpreadsheet className={iconClass} />;
      case 'PPT':
        return <Presentation className={iconClass} />;
      default:
        return <FileQuestion className={iconClass} />;
    }
  };

  // Get category label
  const getCategoryLabel = () => {
    switch (category) {
      case 'DOCUMENT':
        return 'Document';
      case 'Q_AND_A':
        return 'Q&A';
      case 'EXCEL':
        return 'Spreadsheet';
      default:
        return category;
    }
  };

  // Get status color
  const getStatusColor = () => {
    switch (status) {
      case 'APPROVED':
        return 'bg-green-500/10 text-green-700 dark:text-green-400 border-green-500/20';
      case 'IN_REVIEW':
        return 'bg-blue-500/10 text-blue-700 dark:text-blue-400 border-blue-500/20';
      case 'DRAFT':
        return 'bg-yellow-500/10 text-yellow-700 dark:text-yellow-400 border-yellow-500/20';
      case 'REJECTED':
        return 'bg-red-500/10 text-red-700 dark:text-red-400 border-red-500/20';
      default:
        return 'bg-muted text-muted-foreground';
    }
  };

  return (
    <Card
      className={cn(
        'group relative cursor-pointer transition-all duration-200 hover:shadow-lg hover:scale-[1.02] hover:border-primary/50',
        className
      )}
      onClick={onClick}
    >
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between gap-2">
          <div className="flex items-start gap-3">
            <div className="rounded-lg border bg-muted/50 p-2 text-muted-foreground transition-colors group-hover:border-primary/50 group-hover:text-primary">
              {getArtifactIcon()}
            </div>
            <div className="flex-1 space-y-1">
              <CardTitle className="text-base line-clamp-1">{name}</CardTitle>
              <CardDescription className="flex items-center gap-2 text-xs">
                <Badge variant="outline" className="text-xs">
                  {type}
                </Badge>
                <span>â€¢</span>
                <span>{getCategoryLabel()}</span>
              </CardDescription>
            </div>
          </div>
          <Badge
            variant="outline"
            className={cn('text-xs font-medium', getStatusColor())}
          >
            {status}
          </Badge>
        </div>
      </CardHeader>

      <CardContent className="space-y-3">
        {/* Tags */}
        {tags.length > 0 && (
          <div className="flex flex-wrap gap-1.5">
            {tags.slice(0, 3).map((tag) => (
              <Badge
                key={tag}
                variant="secondary"
                className="text-xs font-normal"
              >
                {tag.replace(/_/g, ' ')}
              </Badge>
            ))}
            {tags.length > 3 && (
              <Badge variant="secondary" className="text-xs font-normal">
                +{tags.length - 3} more
              </Badge>
            )}
          </div>
        )}

        {/* Metadata */}
        <div className="flex items-center justify-between text-xs text-muted-foreground">
          <div className="flex items-center gap-1">
            <Clock className="h-3 w-3" />
            <span>{formatDate(createdAt)}</span>
          </div>
          <span className="truncate max-w-[120px]" title={createdBy}>
            by {createdBy}
          </span>
        </div>

        {/* View Action */}
        <Button
          variant="ghost"
          size="sm"
          className="w-full opacity-0 group-hover:opacity-100 transition-opacity"
          onClick={(e) => {
            e.stopPropagation();
            onClick();
          }}
        >
          <Eye className="h-4 w-4 mr-2" />
          View & Edit
        </Button>
      </CardContent>

      {/* Hover Effect Border */}
      <div className="absolute inset-0 rounded-lg border-2 border-primary/0 transition-colors group-hover:border-primary/20 pointer-events-none" />
    </Card>
  );
}