import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { QueryProvider } from "@/components/providers/QueryProvider";
import { ThemeProvider } from "@/components/providers/ThemeProvider";
import { Toaster } from "@/components/ui/sonner";
import { AmplifyConfigProvider } from "@/components/providers/AmplifyConfigProvider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="dark" data-theme="dark" suppressHydrationWarning>
      <head>
        <script
          dangerouslySetInnerHTML={{
            __html: `
              (function() {
                try {
                  const stored = localStorage.getItem('bidops-ui-storage');
                  const themes = ['light', 'dark', 'deloitte', 'futuristic'];
                  const parsed = stored ? JSON.parse(stored) : null;
                  const theme = parsed?.state?.theme && themes.includes(parsed.state.theme)
                    ? parsed.state.theme
                    : 'dark';

                  themes.forEach((t) => document.documentElement.classList.remove(t));
                  document.documentElement.classList.add(theme);
                  document.documentElement.setAttribute('data-theme', theme);
                } catch (e) {
                  const fallback = 'dark';
                  ['light', 'dark', 'deloitte', 'futuristic'].forEach((t) =>
                    document.documentElement.classList.remove(t)
                  );
                  document.documentElement.classList.add(fallback);
                  document.documentElement.setAttribute('data-theme', fallback);
                }
              })();
            `,
          }}
        />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
       <AmplifyConfigProvider>
          <ThemeProvider>
            <QueryProvider>
              {children}
              <Toaster />
            </QueryProvider>
          </ThemeProvider>
        </AmplifyConfigProvider>
      </body>
    </html>
  );
}
