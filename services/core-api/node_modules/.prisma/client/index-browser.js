
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  profileImageUrl: 'profileImageUrl',
  preferredLanguage: 'preferredLanguage',
  themePreference: 'themePreference',
  emailVerified: 'emailVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLogin: 'lastLogin',
  cognitoUserId: 'cognitoUserId'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  resource: 'resource',
  action: 'action',
  createdAt: 'createdAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  value: 'value',
  deadline: 'deadline',
  progressPercentage: 'progressPercentage',
  createdBy: 'createdBy',
  completedBy: 'completedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  metadata: 'metadata'
};

exports.Prisma.ProjectDocumentScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  fileName: 'fileName',
  filePath: 'filePath',
  fileType: 'fileType',
  fileSize: 'fileSize',
  rawFileLocation: 'rawFileLocation',
  processedFileLocation: 'processedFileLocation',
  uploadedBy: 'uploadedBy',
  uploadedAt: 'uploadedAt',
  metadata: 'metadata'
};

exports.Prisma.ProjectMemberScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  userId: 'userId',
  addedById: 'addedById',
  joinedAt: 'joinedAt'
};

exports.Prisma.WorkflowExecutionScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  status: 'status',
  initiatedBy: 'initiatedBy',
  handledBy: 'handledBy',
  completedBy: 'completedBy',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  lastUpdatedAt: 'lastUpdatedAt',
  workflowConfig: 'workflowConfig',
  errorLog: 'errorLog',
  errorMessage: 'errorMessage',
  results: 'results'
};

exports.Prisma.AgentTaskScalarFieldEnum = {
  id: 'id',
  workflowExecutionId: 'workflowExecutionId',
  initiatedBy: 'initiatedBy',
  handledBy: 'handledBy',
  completedBy: 'completedBy',
  agent: 'agent',
  status: 'status',
  sequenceOrder: 'sequenceOrder',
  inputData: 'inputData',
  outputData: 'outputData',
  taskConfig: 'taskConfig',
  errorLog: 'errorLog',
  errorMessage: 'errorMessage',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  executionTimeSeconds: 'executionTimeSeconds'
};

exports.Prisma.ArtifactScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  type: 'type',
  category: 'category',
  status: 'status',
  createdBy: 'createdBy',
  approvedBy: 'approvedBy',
  createdAt: 'createdAt',
  approvedAt: 'approvedAt'
};

exports.Prisma.ArtifactVersionScalarFieldEnum = {
  id: 'id',
  artifactId: 'artifactId',
  versionNumber: 'versionNumber',
  content: 'content',
  location: 'location',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.KnowledgeBaseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  scope: 'scope',
  projectId: 'projectId',
  documentCount: 'documentCount',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  vectorStoreId: 'vectorStoreId'
};

exports.Prisma.KnowledgeBaseDocumentScalarFieldEnum = {
  id: 'id',
  knowledgeBaseId: 'knowledgeBaseId',
  fileName: 'fileName',
  filePath: 'filePath',
  fileType: 'fileType',
  fileSize: 'fileSize',
  s3Bucket: 's3Bucket',
  s3Key: 's3Key',
  uploadedBy: 'uploadedBy',
  uploadedAt: 'uploadedAt',
  metadata: 'metadata',
  vectorIds: 'vectorIds'
};

exports.Prisma.KnowledgeBasePermissionScalarFieldEnum = {
  id: 'id',
  knowledgeBaseId: 'knowledgeBaseId',
  userId: 'userId',
  roleId: 'roleId',
  permissionType: 'permissionType',
  grantedAt: 'grantedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  read: 'read',
  metadata: 'metadata',
  createdAt: 'createdAt',
  readAt: 'readAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  previousState: 'previousState',
  newState: 'newState',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.AgentConfigurationScalarFieldEnum = {
  id: 'id',
  agentType: 'agentType',
  modelName: 'modelName',
  temperature: 'temperature',
  maxTokens: 'maxTokens',
  systemPrompt: 'systemPrompt',
  additionalParameters: 'additionalParameters',
  enabled: 'enabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.IntegrationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  configuration: 'configuration',
  enabled: 'enabled',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IntegrationLogScalarFieldEnum = {
  id: 'id',
  integrationId: 'integrationId',
  action: 'action',
  status: 'status',
  requestData: 'requestData',
  responseData: 'responseData',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt'
};

exports.Prisma.BidStatisticsScalarFieldEnum = {
  id: 'id',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  submittedBids: 'submittedBids',
  wonBids: 'wonBids',
  totalValue: 'totalValue',
  wonValue: 'wonValue',
  successRate: 'successRate',
  activeRfps: 'activeRfps',
  detailedMetrics: 'detailedMetrics',
  calculatedAt: 'calculatedAt'
};

exports.Prisma.SubmissionRecordScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  artifactId: 'artifactId',
  portalName: 'portalName',
  submissionId: 'submissionId',
  status: 'status',
  submittedBy: 'submittedBy',
  submittedAt: 'submittedAt',
  submissionMetadata: 'submissionMetadata'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Role: 'Role',
  UserRole: 'UserRole',
  Permission: 'Permission',
  Project: 'Project',
  ProjectDocument: 'ProjectDocument',
  ProjectMember: 'ProjectMember',
  WorkflowExecution: 'WorkflowExecution',
  AgentTask: 'AgentTask',
  Artifact: 'Artifact',
  ArtifactVersion: 'ArtifactVersion',
  KnowledgeBase: 'KnowledgeBase',
  KnowledgeBaseDocument: 'KnowledgeBaseDocument',
  KnowledgeBasePermission: 'KnowledgeBasePermission',
  Notification: 'Notification',
  AuditLog: 'AuditLog',
  AgentConfiguration: 'AgentConfiguration',
  Integration: 'Integration',
  IntegrationLog: 'IntegrationLog',
  BidStatistics: 'BidStatistics',
  SubmissionRecord: 'SubmissionRecord'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
