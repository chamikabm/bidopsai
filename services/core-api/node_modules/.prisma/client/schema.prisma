// Prisma Schema for BidOps.AI Platform
// Source: specs/002-create-a-graphql/data-model.md

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MANAGEMENT
// ============================================

model User {
  id                String    @id @default(uuid()) @db.Uuid
  email             String    @unique
  username          String    @unique
  passwordHash      String?   @map("password_hash")
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  profileImageUrl   String?   @map("profile_image_url")
  preferredLanguage String?   @default("en") @map("preferred_language")
  themePreference   String?   @default("light") @map("theme_preference")
  emailVerified     Boolean   @default(false) @map("email_verified")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  lastLogin         DateTime? @map("last_login")
  cognitoUserId     String    @unique @map("cognito_user_id")

  // Relations
  roles                   UserRole[]
  projectMemberships      ProjectMember[]
  createdProjects         Project[]               @relation("ProjectCreator")
  completedProjects       Project[]               @relation("ProjectCompleter")
  notifications           Notification[]
  auditLogs               AuditLog[]
  uploadedDocuments       ProjectDocument[]
  createdKnowledgeBases   KnowledgeBase[]
  createdArtifacts        Artifact[]              @relation("ArtifactCreator")
  approvedArtifacts       Artifact[]              @relation("ArtifactApprover")
  submissions             SubmissionRecord[]
  createdIntegrations     Integration[]
  uploadedKBDocuments     KnowledgeBaseDocument[]
  createdArtifactVersions ArtifactVersion[]

  @@index([email])
  @@index([cognitoUserId])
  @@map("users")
}

model Role {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userRoles     UserRole[]
  permissions   Permission[]
  kbPermissions KnowledgeBasePermission[]

  @@map("roles")
}

model UserRole {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  roleId     String   @map("role_id") @db.Uuid
  assignedAt DateTime @default(now()) @map("assigned_at")
  assignedBy String?  @map("assigned_by") @db.Uuid

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@map("user_roles")
}

model Permission {
  id        String   @id @default(uuid()) @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  resource  String
  action    String
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, resource, action])
  @@index([roleId])
  @@map("permissions")
}

// ============================================
// PROJECT MANAGEMENT
// ============================================

model Project {
  id                 String    @id @default(uuid()) @db.Uuid
  name               String
  description        String?   @db.Text
  status             String    @default("OPEN")
  value              Decimal?  @db.Decimal(15, 2)
  deadline           DateTime? @db.Date
  progressPercentage Int       @default(0) @map("progress_percentage")
  createdBy          String    @map("created_by") @db.Uuid
  completedBy        String?   @map("completed_by") @db.Uuid
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  completedAt        DateTime? @map("completed_at")
  metadata           Json?

  // Relations
  creator            User                @relation("ProjectCreator", fields: [createdBy], references: [id])
  completer          User?               @relation("ProjectCompleter", fields: [completedBy], references: [id])
  members            ProjectMember[]
  documents          ProjectDocument[]
  knowledgeBases     KnowledgeBase[]
  artifacts          Artifact[]
  workflowExecutions WorkflowExecution[]
  submissions        SubmissionRecord[]

  @@index([status, createdAt])
  @@index([createdBy])
  @@index([deadline])
  @@map("projects")
}

model ProjectDocument {
  id                    String   @id @default(uuid()) @db.Uuid
  projectId             String   @map("project_id") @db.Uuid
  fileName              String   @map("file_name")
  filePath              String   @map("file_path")
  fileType              String   @map("file_type")
  fileSize              BigInt   @map("file_size")
  rawFileLocation       String   @map("raw_file_location")
  processedFileLocation String?  @map("processed_file_location")
  uploadedBy            String   @map("uploaded_by") @db.Uuid
  uploadedAt            DateTime @default(now()) @map("uploaded_at")
  metadata              Json?

  // Relations
  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploader User    @relation(fields: [uploadedBy], references: [id])

  @@index([projectId])
  @@map("project_documents")
}

model ProjectMember {
  id        String   @id @default(uuid()) @db.Uuid
  projectId String   @map("project_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  addedById String   @map("added_by_id") @db.Uuid
  joinedAt  DateTime @default(now()) @map("joined_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@map("project_members")
}

// ============================================
// WORKFLOW EXECUTION
// ============================================

model WorkflowExecution {
  id             String    @id @default(uuid()) @db.Uuid
  projectId      String    @map("project_id") @db.Uuid
  status         String    @default("OPEN")
  initiatedBy    String    @map("initiated_by") @db.Uuid
  handledBy      String?   @map("handled_by") @db.Uuid
  completedBy    String?   @map("completed_by") @db.Uuid
  startedAt      DateTime  @default(now()) @map("started_at")
  completedAt    DateTime? @map("completed_at")
  lastUpdatedAt  DateTime  @updatedAt @map("last_updated_at")
  workflowConfig Json?     @map("workflow_config")
  errorLog       Json?     @map("error_log")
  errorMessage   String?   @map("error_message") @db.Text
  results        Json?

  // Relations
  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  agentTasks AgentTask[]

  @@index([projectId, status])
  @@index([status, lastUpdatedAt])
  @@map("workflow_executions")
}

model AgentTask {
  id                   String    @id @default(uuid()) @db.Uuid
  workflowExecutionId  String    @map("workflow_execution_id") @db.Uuid
  initiatedBy          String    @map("initiated_by") @db.Uuid
  handledBy            String?   @map("handled_by") @db.Uuid
  completedBy          String?   @map("completed_by") @db.Uuid
  agent                String
  status               String    @default("OPEN")
  sequenceOrder        Int       @map("sequence_order")
  inputData            Json?     @map("input_data")
  outputData           Json?     @map("output_data")
  taskConfig           Json?     @map("task_config")
  errorLog             Json?     @map("error_log")
  errorMessage         String?   @map("error_message") @db.Text
  startedAt            DateTime? @map("started_at")
  completedAt          DateTime? @map("completed_at")
  executionTimeSeconds Float?    @map("execution_time_seconds")

  // Relations
  workflowExecution WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)

  @@index([workflowExecutionId, sequenceOrder])
  @@index([status])
  @@map("agent_tasks")
}

// ============================================
// ARTIFACTS
// ============================================

model Artifact {
  id         String    @id @default(uuid()) @db.Uuid
  projectId  String    @map("project_id") @db.Uuid
  name       String
  type       String
  category   String
  status     String    @default("DRAFT")
  createdBy  String    @map("created_by") @db.Uuid
  approvedBy String?   @map("approved_by") @db.Uuid
  createdAt  DateTime  @default(now()) @map("created_at")
  approvedAt DateTime? @map("approved_at")

  // Relations
  project     Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator     User               @relation("ArtifactCreator", fields: [createdBy], references: [id])
  approver    User?              @relation("ArtifactApprover", fields: [approvedBy], references: [id])
  versions    ArtifactVersion[]
  submissions SubmissionRecord[]

  @@index([projectId, status])
  @@index([createdAt])
  @@map("artifacts")
}

model ArtifactVersion {
  id            String   @id @default(uuid()) @db.Uuid
  artifactId    String   @map("artifact_id") @db.Uuid
  versionNumber Int      @map("version_number")
  content       Json
  location      String?
  createdBy     String   @map("created_by") @db.Uuid
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  artifact Artifact @relation(fields: [artifactId], references: [id], onDelete: Cascade)
  creator  User     @relation(fields: [createdBy], references: [id])

  @@unique([artifactId, versionNumber])
  @@index([artifactId])
  @@index([createdAt])
  @@map("artifact_versions")
}

// ============================================
// KNOWLEDGE BASES
// ============================================

model KnowledgeBase {
  id            String   @id @default(uuid()) @db.Uuid
  name          String
  description   String?  @db.Text
  scope         String
  projectId     String?  @map("project_id") @db.Uuid
  documentCount Int      @default(0) @map("document_count")
  createdBy     String   @map("created_by") @db.Uuid
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  vectorStoreId String?  @map("vector_store_id")

  // Relations
  project     Project?                  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator     User                      @relation(fields: [createdBy], references: [id])
  documents   KnowledgeBaseDocument[]
  permissions KnowledgeBasePermission[]

  @@index([scope])
  @@index([projectId])
  @@map("knowledge_bases")
}

model KnowledgeBaseDocument {
  id              String   @id @default(uuid()) @db.Uuid
  knowledgeBaseId String   @map("knowledge_base_id") @db.Uuid
  fileName        String   @map("file_name")
  filePath        String   @map("file_path")
  fileType        String   @map("file_type")
  fileSize        BigInt   @map("file_size")
  s3Bucket        String   @map("s3_bucket")
  s3Key           String   @map("s3_key")
  uploadedBy      String   @map("uploaded_by") @db.Uuid
  uploadedAt      DateTime @default(now()) @map("uploaded_at")
  metadata        Json?
  vectorIds       String?  @map("vector_ids")

  // Relations
  knowledgeBase KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
  uploader      User          @relation(fields: [uploadedBy], references: [id])

  @@index([knowledgeBaseId])
  @@map("knowledge_base_documents")
}

model KnowledgeBasePermission {
  id              String   @id @default(uuid()) @db.Uuid
  knowledgeBaseId String   @map("knowledge_base_id") @db.Uuid
  userId          String?  @map("user_id") @db.Uuid
  roleId          String?  @map("role_id") @db.Uuid
  permissionType  String   @map("permission_type")
  grantedAt       DateTime @default(now()) @map("granted_at")

  // Relations
  knowledgeBase KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
  role          Role?         @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@index([knowledgeBaseId])
  @@map("knowledge_base_permissions")
}

// ============================================
// NOTIFICATIONS & AUDIT
// ============================================

model Notification {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  type      String
  title     String
  message   String    @db.Text
  read      Boolean   @default(false)
  metadata  Json?
  createdAt DateTime  @default(now()) @map("created_at")
  readAt    DateTime? @map("read_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([createdAt])
  @@map("notifications")
}

model AuditLog {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @map("user_id") @db.Uuid
  action        String
  resourceType  String   @map("resource_type")
  resourceId    String   @map("resource_id") @db.Uuid
  previousState Json?    @map("previous_state")
  newState      Json?    @map("new_state")
  ipAddress     String?  @map("ip_address")
  userAgent     String?  @map("user_agent")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([resourceType, resourceId])
  @@index([createdAt])
  @@map("audit_logs")
}

// ============================================
// SYSTEM CONFIGURATION
// ============================================

model AgentConfiguration {
  id                   String   @id @default(uuid()) @db.Uuid
  agentType            String   @unique @map("agent_type")
  modelName            String   @map("model_name")
  temperature          Float    @default(0.7)
  maxTokens            Int      @map("max_tokens")
  systemPrompt         Json     @map("system_prompt")
  additionalParameters Json?    @map("additional_parameters")
  enabled              Boolean  @default(true)
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  updatedBy            String?  @map("updated_by") @db.Uuid

  @@map("agent_configurations")
}

model Integration {
  id            String   @id @default(uuid()) @db.Uuid
  type          String   @unique
  name          String
  configuration Json
  enabled       Boolean  @default(true)
  createdBy     String   @map("created_by") @db.Uuid
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  creator User             @relation(fields: [createdBy], references: [id])
  logs    IntegrationLog[]

  @@map("integrations")
}

model IntegrationLog {
  id            String   @id @default(uuid()) @db.Uuid
  integrationId String   @map("integration_id") @db.Uuid
  action        String
  status        String
  requestData   Json?    @map("request_data")
  responseData  Json?    @map("response_data")
  errorMessage  String?  @map("error_message") @db.Text
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId])
  @@index([createdAt])
  @@map("integration_logs")
}

// ============================================
// STATISTICS & SUBMISSIONS
// ============================================

model BidStatistics {
  id              String   @id @default(uuid()) @db.Uuid
  periodStart     DateTime @map("period_start") @db.Date
  periodEnd       DateTime @map("period_end") @db.Date
  submittedBids   Int      @map("submitted_bids")
  wonBids         Int      @map("won_bids")
  totalValue      Decimal  @map("total_value") @db.Decimal(15, 2)
  wonValue        Decimal  @map("won_value") @db.Decimal(15, 2)
  successRate     Float    @map("success_rate")
  activeRfps      Int      @map("active_rfps")
  detailedMetrics Json?    @map("detailed_metrics")
  calculatedAt    DateTime @default(now()) @map("calculated_at")

  @@unique([periodStart, periodEnd])
  @@index([periodStart, periodEnd])
  @@map("bid_statistics")
}

model SubmissionRecord {
  id                 String   @id @default(uuid()) @db.Uuid
  projectId          String   @map("project_id") @db.Uuid
  artifactId         String   @map("artifact_id") @db.Uuid
  portalName         String   @map("portal_name")
  submissionId       String?  @map("submission_id")
  status             String
  submittedBy        String   @map("submitted_by") @db.Uuid
  submittedAt        DateTime @default(now()) @map("submitted_at")
  submissionMetadata Json?    @map("submission_metadata")

  // Relations
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  artifact Artifact @relation(fields: [artifactId], references: [id])
  user     User     @relation(fields: [submittedBy], references: [id])

  @@index([projectId])
  @@index([status])
  @@map("submission_records")
}
