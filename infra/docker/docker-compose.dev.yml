version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: bidopsai-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-bidopsai}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-bidopsai_dev_password}
      - POSTGRES_DB=${POSTGRES_DB:-bidopsai}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - bidopsai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bidopsai}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # GraphQL Core API
  core-api:
    build:
      context: ../../
      dockerfile: infra/docker/services/core-api/Dockerfile.dev
    container_name: bidopsai-core-api-dev
    ports:
      - "4000:4000"
    volumes:
      # Mount source code for hot reload
      - ../../services/core-api:/app
      # Preserve node_modules
      - /app/node_modules
      # Mount prisma for migrations
      - ../../services/core-api/prisma:/app/prisma
    environment:
      - NODE_ENV=development
      - PORT=4000
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bidopsai}:${POSTGRES_PASSWORD:-bidopsai_dev_password}@postgres:5432/${POSTGRES_DB:-bidopsai}
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - COGNITO_REGION=${AWS_REGION:-us-east-1}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
    networks:
      - bidopsai-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Web Application
  web:
    build:
      context: ../../
      dockerfile: infra/docker/apps/web/Dockerfile.dev
    container_name: bidopsai-web-dev
    ports:
      - "3000:3000"
    volumes:
      # Mount source code for hot reload
      - ../../apps/web:/app
      # Preserve node_modules
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:4000/graphql}
      - NEXT_PUBLIC_AGENT_CORE_URL=${NEXT_PUBLIC_AGENT_CORE_URL:-http://localhost:8000}
      - NEXT_PUBLIC_AWS_REGION=${NEXT_PUBLIC_AWS_REGION:-us-east-1}
      - NEXT_PUBLIC_COGNITO_USER_POOL_ID=${NEXT_PUBLIC_COGNITO_USER_POOL_ID}
      - NEXT_PUBLIC_COGNITO_CLIENT_ID=${NEXT_PUBLIC_COGNITO_CLIENT_ID}
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    networks:
      - bidopsai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres-data:
    driver: local

networks:
  bidopsai-network:
    driver: bridge
    name: bidopsai-network