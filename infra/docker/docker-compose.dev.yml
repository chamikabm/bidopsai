version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: bidopsai-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-bidopsai}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-bidopsai_dev_password}
      - POSTGRES_DB=${POSTGRES_DB:-bidopsai}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - bidopsai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bidopsai}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # GraphQL Core API
  core-api:
    build:
      context: ../../
      dockerfile: infra/docker/services/core-api/Dockerfile.dev
    container_name: bidopsai-core-api-dev
    ports:
      - "4000:4000"
    volumes:
      # Mount source code for hot reload
      - ../../services/core-api:/app
      # Preserve node_modules and generated Prisma client
      - /app/node_modules
      - /app/node_modules/.prisma
      # Mount prisma for migrations
      - ../../services/core-api/prisma:/app/prisma
    env_file:
      - ../../services/core-api/.env.development
    environment:
      # Override DATABASE_URL for Docker network
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bidopsai}:${POSTGRES_PASSWORD:-bidopsai_dev_password}@postgres:5432/${POSTGRES_DB:-bidopsai}
      - NODE_ENV=development
      - PORT=4000
    networks:
      - bidopsai-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Web Application
  web:
    build:
      context: ../../
      dockerfile: infra/docker/apps/web/Dockerfile.dev
    container_name: bidopsai-web-dev
    ports:
      - "3000:3000"
    depends_on:
      core-api:
        condition: service_healthy
    volumes:
      # Mount source code for hot reload
      - ../../apps/web:/app
      # Preserve node_modules
      - /app/node_modules
    env_file:
      - ../../apps/web/.env
    environment:
      - NODE_ENV=development
      # Use localhost for browser access to API
      - NEXT_PUBLIC_API_URL=http://localhost:4000
      - NEXT_PUBLIC_AGENT_CORE_URL=http://localhost:5000
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    networks:
      - bidopsai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # LocalStack for S3 (local AWS services)
  localstack:
    image: localstack/localstack:latest
    container_name: bidopsai-localstack-dev
    ports:
      - "4566:4566"  # LocalStack gateway
      - "4571:4571"  # LocalStack S3
    environment:
      - SERVICES=s3
      - DEBUG=1
      # Podman compatibility settings
      - PERSISTENCE=1
      - MAIN_CONTAINER_NAME=bidopsai-localstack-dev
      - SKIP_INFRA_DOWNLOADS=1
      - SKIP_SSL_CERT_DOWNLOAD=1
      # Skip cleanup to avoid /tmp/localstack busy errors
      - LOCALSTACK_VOLUME_DIR=/var/lib/localstack
    volumes:
      # Use /var/lib/localstack instead of /tmp for Podman
      - localstack-data:/var/lib/localstack
    networks:
      - bidopsai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Workflow Supervisor Agent
  workflow-agent:
    build:
      context: ../../
      dockerfile: infra/docker/agents-core/workflow/Dockerfile.dev
    container_name: bidopsai-workflow-agent-dev
    ports:
      - "8001:8001"
    volumes:
      # Mount source code for hot reload
      - ../../agents-core:/app
      # Preserve Python cache and UV cache
      - workflow-uv-cache:/root/.cache/uv
      - workflow-pytest-cache:/app/.pytest_cache
    env_file:
      - ../../agents-core/.env.development
    environment:
      # Override database and S3 URLs for Docker network
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bidopsai}:${POSTGRES_PASSWORD:-bidopsai_dev_password}@postgres:5432/${POSTGRES_DB:-bidopsai}
      - S3_ENDPOINT_URL=http://localstack:4566
      - WORKFLOW_HOST=0.0.0.0
      - WORKFLOW_PORT=8001
      - LOG_LEVEL=DEBUG
      - UVICORN_RELOAD=true
    networks:
      - bidopsai-network
    depends_on:
      postgres:
        condition: service_healthy
      localstack:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AI Assistant Supervisor Agent (Future)
  ai-assistant-agent:
    build:
      context: ../../
      dockerfile: infra/docker/agents-core/ai_assistant/Dockerfile.dev
    container_name: bidopsai-ai-assistant-agent-dev
    ports:
      - "8002:8002"
    volumes:
      # Mount source code for hot reload
      - ../../agents-core:/app
      # Preserve Python cache and UV cache
      - ai-assistant-uv-cache:/root/.cache/uv
      - ai-assistant-pytest-cache:/app/.pytest_cache
    env_file:
      - ../../agents-core/.env.development
    environment:
      # Override database and S3 URLs for Docker network
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bidopsai}:${POSTGRES_PASSWORD:-bidopsai_dev_password}@postgres:5432/${POSTGRES_DB:-bidopsai}
      - S3_ENDPOINT_URL=http://localstack:4566
      - AI_ASSISTANT_HOST=0.0.0.0
      - AI_ASSISTANT_PORT=8002
      - LOG_LEVEL=DEBUG
      - UVICORN_RELOAD=true
    networks:
      - bidopsai-network
    depends_on:
      postgres:
        condition: service_healthy
      localstack:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - ai-assistant  # Only start with --profile ai-assistant

volumes:
  postgres-data:
    driver: local
  localstack-data:
    driver: local
  workflow-uv-cache:
    driver: local
  workflow-pytest-cache:
    driver: local
  ai-assistant-uv-cache:
    driver: local
  ai-assistant-pytest-cache:
    driver: local

networks:
  bidopsai-network:
    driver: bridge
    name: bidopsai-network