name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: "Force rebuild all services"
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  NODE_VERSION: "24"
  PYTHON_VERSION: "3.11"
  # ECR repository names (matches CDK infrastructure naming)
  ECR_REPO_APP: bidopsai/app # Frontend
  ECR_REPO_AGENT: bidopsai/agent # AgentCore

permissions:
  id-token: write # Required for requesting the JWT
  contents: read # Required for actions/checkout

jobs:
  # ============================================================================
  # PRE-COMMIT SECURITY CHECKS
  # ============================================================================
  pre-commit:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for comparison

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit on changed files only
        run: |
          # For PRs, check files changed in the PR
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            pre-commit run --from-ref origin/${{ github.base_ref }} --to-ref HEAD
          else
            # For pushes to main/develop, check files in the last commit
            pre-commit run --from-ref HEAD~1 --to-ref HEAD
          fi

  # ============================================================================
  # CHANGE DETECTION
  # ============================================================================
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    needs: pre-commit
    outputs:
      app: ${{ steps.changes.outputs.app }}
      agent: ${{ steps.changes.outputs.agent }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            app:
              - 'apps/web/**'
              - 'docker/apps/web/**'
              - '.github/workflows/ci-cd.yml'
            agent:
              - 'agentcore/**'
              - '.github/workflows/ci-cd.yml'

  # ============================================================================
  # LINT JOBS
  # ============================================================================
  # NOTE: Temporarily disabled while fixing lint errors
  # TODO: Re-enable once codebase passes linting
  # - Frontend: ESLint + TypeScript errors
  # - AgentCore: Ruff + Black formatting issues
  # ============================================================================
  lint-app:
    name: Lint Frontend
    runs-on: ubuntu-latest
    needs: changes
    if: false # Temporarily disabled - failing due to lint errors
    defaults:
      run:
        working-directory: apps/web
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: apps/web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: TypeScript type check
        run: npx tsc --noEmit

  lint-agent:
    name: Lint AgentCore
    runs-on: ubuntu-latest
    needs: changes
    if: false # Temporarily disabled - failing due to lint errors
    defaults:
      run:
        working-directory: agentcore
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: agentcore/requirements.txt

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install ruff black
          pip install -r requirements.txt

      - name: Run Ruff linting
        run: ruff check .
        continue-on-error: true

      - name: Check code formatting with Black
        run: black --check .
        continue-on-error: true

  # ============================================================================
  # TEST JOBS
  # ============================================================================
  # NOTE: Temporarily disabled while stabilizing the build
  # TODO: Re-enable once dependencies are fixed
  # ============================================================================
  test-app:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: changes
    if: false # Temporarily disabled - build/dependency issues
    defaults:
      run:
        working-directory: apps/web
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: apps/web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:4000
          NEXT_PUBLIC_AGENT_CORE_URL: http://localhost:8000

  # ============================================================================
  # BUILD AND PUSH TO ECR
  # ============================================================================
  build-app:
    name: Build & Push Frontend
    runs-on: ubuntu-latest
    needs: changes
    if: github.event_name == 'push' || github.event.inputs.force_rebuild == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_APP }}
          tags: |
            type=sha,prefix={{branch}}-,format=short
            type=raw,value=latest,enable={{is_default_branch}}
          flavor: |
            latest=false

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/apps/web/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_API_URL=${{ env.NEXT_PUBLIC_API_URL }}
            NEXT_PUBLIC_AGENT_CORE_URL=${{ env.NEXT_PUBLIC_AGENT_CORE_URL }}
            NEXT_PUBLIC_AWS_REGION=${{ env.AWS_REGION }}
            NEXT_PUBLIC_COGNITO_USER_POOL_ID=${{ secrets.NEXT_PUBLIC_COGNITO_USER_POOL_ID }}
            NEXT_PUBLIC_COGNITO_CLIENT_ID=${{ secrets.NEXT_PUBLIC_COGNITO_CLIENT_ID }}

      - name: Output image details
        run: |
          echo "‚úÖ Frontend image pushed successfully"
          echo "üì¶ Repository: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_APP }}"
          echo "üè∑Ô∏è  Tags: ${{ steps.meta.outputs.tags }}"

  build-agent:
    name: Build & Push AgentCore
    runs-on: ubuntu-latest
    needs: changes
    if: (needs.changes.outputs.agent == 'true' && (github.event_name == 'push' || github.event.inputs.force_rebuild == 'true')) || github.event.inputs.force_rebuild == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_AGENT }}
          tags: |
            type=sha,prefix={{branch}}-,format=short
            type=raw,value=latest,enable={{is_default_branch}}
          flavor: |
            latest=false

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: agentcore
          file: agentcore/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image details
        run: |
          echo "‚úÖ AgentCore image pushed successfully"
          echo "üì¶ Repository: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_AGENT }}"
          echo "üè∑Ô∏è  Tags: ${{ steps.meta.outputs.tags }}"

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [changes, build-app, build-agent]
    if: always() && (needs.build-app.result == 'success' || needs.build-agent.result == 'success')
    permissions:
      id-token: write
      contents: read
      security-events: write # Required for uploading SARIF results
    strategy:
      matrix:
        include:
          - service: app
            repo: ${{ needs.build-app.result == 'success' && 'bidopsai/app' || '' }}
          - service: agent
            repo: ${{ needs.build-agent.result == 'success' && 'bidopsai/agent' || '' }}
    steps:
      - name: Skip if service wasn't built
        if: matrix.repo == ''
        run: |
          echo "Service ${{ matrix.service }} was not built, skipping scan"
          exit 0

      - name: Checkout code
        if: matrix.repo != ''
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        if: matrix.repo != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: matrix.repo != ''
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get image tag from build
        if: matrix.repo != ''
        id: get-tag
        run: |
          # Use the SHA-based tag we just built
          TAG="${{ github.ref_name }}-${{ github.sha }}"
          echo "tag=${TAG:0:14}" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        if: matrix.repo != ''
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.login-ecr.outputs.registry }}/${{ matrix.repo }}:${{ steps.get-tag.outputs.tag }}"
          format: "sarif"
          output: "trivy-results-${{ matrix.service }}.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        if: always() && matrix.repo != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results-${{ matrix.service }}.sarif"

  # ============================================================================
  # SUMMARY
  # ============================================================================
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [changes, build-app, build-agent, security-scan]
    if: always()
    steps:
      - name: Check build results
        run: |
          echo "üîç Change Detection Results:"
          echo "  Frontend (App): ${{ needs.changes.outputs.app }}"
          echo "  AgentCore: ${{ needs.changes.outputs.agent }}"
          echo ""
          echo "üì¶ Build Results:"
          echo "  Frontend (App): ${{ needs.build-app.result }}"
          echo "  AgentCore: ${{ needs.build-agent.result }}"
          echo ""
          echo "üîí Security Scan Results:"
          echo "  Security Scan: ${{ needs.security-scan.result }}"
          echo ""
          if [[ "${{ needs.build-app.result }}" == "failure" ]] || \
             [[ "${{ needs.build-agent.result }}" == "failure" ]]; then
            echo "‚ùå Some builds failed"
            exit 1
          else
            echo "‚úÖ All builds successful or skipped"
          fi
