name: CD - Production Deployment

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '22'
  AWS_REGION: us-east-1
  ECS_CLUSTER: bidops-production
  ECS_SERVICE: bidops-web-service
  ECS_TASK_DEFINITION: bidops-web-task
  CONTAINER_NAME: bidops-web
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/web

jobs:
  # Job 1: Build and Push Docker Image
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.version }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/docker/apps/web/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          provenance: false

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # Job 2: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 3: Deploy to ECS
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://app.bidops.ai
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json

      - name: Fill in new image ID in task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image-tag }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          wait-for-minutes: 10

      - name: Verify deployment
        run: |
          echo "Waiting for service to stabilize..."
          sleep 30
          
          # Get the service status
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].deployments[0].rolloutState' \
            --output text)
          
          echo "Deployment status: $SERVICE_STATUS"
          
          if [ "$SERVICE_STATUS" != "COMPLETED" ]; then
            echo "‚ö†Ô∏è Deployment may not be fully stable yet"
            exit 1
          fi
          
          echo "‚úÖ Deployment completed successfully!"

  # Job 4: Smoke Tests
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: Wait for deployment to settle
        run: sleep 60

      - name: Health check
        run: |
          HEALTH_URL="https://app.bidops.ai/api/health"
          
          echo "Checking health endpoint: $HEALTH_URL"
          
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL)
          
          if [ "$RESPONSE" -eq 200 ]; then
            echo "‚úÖ Health check passed (HTTP $RESPONSE)"
          else
            echo "‚ùå Health check failed (HTTP $RESPONSE)"
            exit 1
          fi

      - name: Basic functionality test
        run: |
          BASE_URL="https://app.bidops.ai"
          
          # Test homepage
          echo "Testing homepage..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $BASE_URL)
          
          if [ "$RESPONSE" -eq 200 ] || [ "$RESPONSE" -eq 302 ]; then
            echo "‚úÖ Homepage accessible (HTTP $RESPONSE)"
          else
            echo "‚ùå Homepage test failed (HTTP $RESPONSE)"
            exit 1
          fi

  # Job 5: Rollback on Failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy, smoke-tests]
    if: failure()
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Rollback ECS service
        run: |
          echo "üîÑ Rolling back deployment..."
          
          # Get the previous task definition
          PREVIOUS_TASK_DEF=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].deployments[1].taskDefinition' \
            --output text)
          
          if [ -n "$PREVIOUS_TASK_DEF" ]; then
            echo "Rolling back to: $PREVIOUS_TASK_DEF"
            
            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service ${{ env.ECS_SERVICE }} \
              --task-definition $PREVIOUS_TASK_DEF \
              --force-new-deployment
            
            echo "‚úÖ Rollback initiated"
          else
            echo "‚ö†Ô∏è No previous task definition found"
          fi

  # Job 6: Notify
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy, smoke-tests]
    if: always()
    
    steps:
      - name: Send notification
        run: |
          if [ "${{ needs.smoke-tests.result }}" == "success" ]; then
            echo "‚úÖ Production deployment successful!"
            echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
            echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
            echo "Commit: ${{ github.sha }}"
          else
            echo "‚ùå Production deployment failed!"
            echo "Check logs for details"
          fi
